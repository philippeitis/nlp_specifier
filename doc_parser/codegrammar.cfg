JS -> RETIF | IFRET | HASSERT | UHASSERT

# Objects
OBJ -> PRP | DT NN | CODE | LIT
# Relationship: eg. less than object
REL -> TJJ IN OBJ | TJJ EQTO OBJ
# the same, same, equal etc
TJJ -> DT JJ | DT JJR | JJ | JJR
# than or equal to
EQTO -> IN CC JJ IN
# is adjective, is relation, is a literal (eg. ==)
PROP -> MVB JJ | MVB MREL | MVB LIT
# Meta-Verb (verb forms + modifiers)
MVB -> RB VB | VB | RB VBZ | VBZ | RB VBP | VBP
# adjective + modifiers
MJJ -> RB JJ | JJ
# Rel + modifiers
MREL -> RB REL | REL
# object has property -> object is red
ASSERT -> OBJ PROP
# Object must have property
HASSERT -> OBJ MD PROP
# For each value, object must have property
UHASSERT -> FOREACH COMMA HASSERT | FOREACH HASSERT
# If object has property, if and only if object has property
PRED -> IN ASSERT | IFF ASSERT
# if and only if
IFF -> IN CC RB IN
# obj in the collection
EXIST -> OBJ IN DT OBJ
# predicate with existential
EPRED -> IN EXIST | IFF EXIST
# Return obj if predicate
RETIF -> RET OBJ PRED | RET OBJ EPRED
# If predicate, return object
IFRET -> PRED RET OBJ | EPRED RET OBJ | PRED COMMA RET OBJ | EPRED COMMA RET OBJ
# *identifer* object from start to end
RANGE -> NN OBJ IN OBJ IN OBJ
# For each object ...
#          for each index `i` from 0 to `self.len()`
FOREACH -> FOR EACH RANGE | FOR EACH RANGE COMMA JJ | FOR EACH RANGE JJ

# Translate from one CFG to another
PRP -> "PRP"
DT -> "DT"
NN -> "NN"
CODE -> "CODE"
JJR -> "JJR"
IN -> "IN"
VBP -> "VBP"
VBZ -> "VBZ"
JJ -> "JJ"
CC -> "CC"
RB -> "RB"
RET -> "RET"
LIT -> "LIT"
DOT -> "."
COMMA -> ","
MD -> "MD"
VB -> "VB"
FOR -> "FOR"
EACH -> "EACH"